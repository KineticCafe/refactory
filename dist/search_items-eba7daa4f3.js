searchNodes=[{"doc":"Refinery allows generating Ecto records with nested overrides for your tests. Refinements module To start using Refinery, first define a refinements module: defmodule MyApp.Refinements do use Refinery , repo : MyApp.Repo end Usage The refinements module has two functions: build/2 generates an Ecto record with the given refinements applied create/2 inserts an Ecto record into the database Refinements A refinement can be a Map in which each key-value pair is either a field with its value an association with a refinement (for belongs_to , has_one , and embeds_one ) soon: an association with a list of refinements (for has_many and embeds_many ) a custom refinement defined in the refinements module (see below) a Tuple with multiple refinements to be applied Basic example defmodule MyApp.Refinements do use Refinery , repo : MyApp.Repo end MyApp.Refinements . build ( MyApp.List , %{ title : &quot;Refined List&quot; , created_by_user : %{ email : &quot;test@email.org&quot; } } ) % MyApp.List { title : &quot;Refined List&quot; , created_by_user : % MyApp.User { email : &quot;test@email.org&quot; } } Default refinements Default refinements can be defined in the refinements module. They are always applied first. defmodule MyApp.Refinements do use Refinery , repo : MyApp.Repo def refinement ( MyApp.List , :default ) do %{ title : &quot;Default Title&quot; } end end MyApp.Refinements . build ( MyApp.List ) % MyApp.List { title : &quot;Default Title&quot; } Custom refinements Custom refinements can be defined in the refinements module and then used by their name. defmodule MyApp.Refinements do use Refinery , repo : MyApp.Repo def refinement ( MyApp.List , :default ) do %{ title : &quot;Default Title&quot; } end def refinement ( MyApp.List , :with_admin_user ) do %{ created_by_user : %{ role : :admin } } end end MyApp.Refinements . build ( MyApp.List , :with_admin_user ) % MyApp.List { title : &quot;Default Title&quot; , created_by_user : % MyApp.User { role : :admin } }","ref":"Refinery.html","title":"Refinery","type":"module"},{"doc":"Generates an Ecto record with the given refinements applied","ref":"Refinery.html#build/3","title":"Refinery.build/3","type":"function"},{"doc":"Inserts an Ecto record with the given refinements applied into the database","ref":"Refinery.html#create/3","title":"Refinery.create/3","type":"function"}]