searchNodes=[{"doc":"Documentation for Refinery .","ref":"Refinery.html","title":"Refinery","type":"module"},{"doc":"Takes a schema type and returns an instance of it with the following layers of data applied: Defaults for this type defined as refinement(type, :default) refinements passed as second argument For all referenced associations, a) Defaults for the association type defined in build/1 b) Defaults passed by the previous layer, e.g. %Offer{department: %{name: &quot;Construction&quot;}} will override the :name on the associated Department c) refinements passed for this specific association name, e.g. passing %{department: %{name: &quot;Carpentry&quot;}} will override the :name of any Department directly or indirectly associated in the current branch","ref":"Refinery.html#build/3","title":"Refinery.build/3","type":"function"},{"doc":"","ref":"Refinery.html#create/3","title":"Refinery.create/3","type":"function"},{"doc":"","ref":"Refinery.html#do_build/3","title":"Refinery.do_build/3","type":"function"},{"doc":"An Elixir library to generate test data recursively with refinements","ref":"readme.html","title":"Refinery","type":"extras"},{"doc":"If available in Hex , the package can be installed by adding refinery to your list of dependencies in mix.exs : def deps do [ { :refinery , &quot;~&gt; 0.1.0&quot; } ] end Documentation can be generated with ExDoc and published on HexDocs . Once published, the docs can be found at https://hexdocs.pm/refinery .","ref":"readme.html#installation","title":"Refinery - Installation","type":"extras"}]