searchData={"content_type":"text/markdown","items":[{"doc":"Refactory allows generating Ecto records with nested overrides for your tests.","ref":"Refactory.html","title":"Refactory","type":"module"},{"doc":"To start using Refactory, first define a factory module:\n\n```elixir\ndefmodule MyApp.Factory do\n  use Refactory, repo: MyApp.Repo\nend\n```","ref":"Refactory.html#module-factory-module","title":"Factory module - Refactory","type":"module"},{"doc":"The factory module has two functions:\n\n- `build/2` generates an Ecto record with the given traits applied\n- `create/2` inserts an Ecto record into the database","ref":"Refactory.html#module-usage","title":"Usage - Refactory","type":"module"},{"doc":"A trait can be\n- a `Map` in which each key-value pair is either\n  - a field with its value\n  - an association with a trait (for `belongs_to`, `has_one`, and `embeds_one`)\n  - _soon:_ an association with a list of traits (for `has_many` and `embeds_many`)\n- a custom trait defined in the factory module (see below)\n- a `Tuple` with multiple traits to be applied","ref":"Refactory.html#module-traits","title":"Traits - Refactory","type":"module"},{"doc":"```elixir\ndefmodule MyApp.Factory do\n  use Refactory, repo: MyApp.Repo\nend\n\nMyApp.Factory.build(MyApp.List, %{\n  title: \"Refined List\",\n  created_by_user: %{email: \"test@email.org\"}\n})\n\n%MyApp.List{\n  title: \"Refined List\",\n  created_by_user: %MyApp.User{\n    email: \"test@email.org\"\n  }\n}\n```","ref":"Refactory.html#module-basic-example","title":"Basic example - Refactory","type":"module"},{"doc":"Default traits can be defined in the factory module.\nThey are always applied first.\n\n```elixir\ndefmodule MyApp.Factory do\n  use Refactory, repo: MyApp.Repo\n\n  def trait(MyApp.List, :default) do\n    %{\n      title: \"Default Title\"\n    }\n  end\nend\n\n\nMyApp.Factory.build(MyApp.List)\n\n%MyApp.List{title: \"Default Title\"}\n```","ref":"Refactory.html#module-default-traits","title":"Default traits - Refactory","type":"module"},{"doc":"Custom traits can be defined in the factory module and then used by their name.\n\n```elixir\ndefmodule MyApp.Factory do\n  use Refactory, repo: MyApp.Repo\n\n  def trait(MyApp.List, :default) do\n    %{\n      title: \"Default Title\"\n    }\n  end\n\n  def trait(MyApp.List, :with_admin_user) do\n    %{\n      created_by_user: %{\n        role: :admin\n      }\n    }\n  end\nend\n\n\nMyApp.Factory.build(MyApp.List, :with_admin_user)\n\n%MyApp.List{title: \"Default Title\", created_by_user: %MyApp.User{role: :admin}}\n```","ref":"Refactory.html#module-custom-traits","title":"Custom traits - Refactory","type":"module"},{"doc":"Generates an Ecto record with the given traits applied","ref":"Refactory.html#build/3","title":"Refactory.build/3","type":"function"},{"doc":"Inserts an Ecto record with the given traits applied into the database","ref":"Refactory.html#create/3","title":"Refactory.create/3","type":"function"}],"producer":{"name":"ex_doc","version":[48,46,51,50,46,50]}}